// back/server.js
// ==========================
// Chargement des dÃ©pendances
// ==========================
require('dotenv').config({ path: __dirname + '/.env' }); Â  Â  Â  Â  Â  Â  
const express = require("express"); Â  Â  Â 
const mysql = require("mysql2"); Â  Â  Â  Â  
const cors = require("cors"); Â  Â  Â  Â  Â  Â 
const bcrypt = require("bcrypt"); Â  Â  Â  Â 
const jwt = require('jsonwebtoken');

// CrÃ©ation de l'application Express
const app = express();
const PORT = process.env.PORT || 2864; Â  
const SECRET_KEY = process.env.JWT_SECRET_KEY; // ClÃ© secrÃ¨te chargÃ©e depuis .env

// ==========================
// Middleware
// ==========================
app.use(express.json()); Â 
app.use(cors()); Â  Â  Â  Â  Â 


// ==========================
// Connexion Ã  la base MySQL
// ==========================
const bddConnexion = mysql.createPool({
Â  host: process.env.DB_HOST, Â  Â  Â  
Â  user: process.env.DB_USER, Â  Â  Â  
Â  password: process.env.DB_PASSWORD, 
Â  database: process.env.DB_NAME Â  Â  
}).promise();


// ==========================
// REGISTER (Inscription) - ADAPTÃ‰ BDD
// ==========================
app.post("/register", async (req, res) => {
Â  const { nom, prenom, mail, login, password } = req.body;

Â  if (!nom || !prenom || !mail || !login || !password) {
Â  Â  return res.status(400).json({ error: "Tous les champs sont requis." });
Â  }

Â  try {
Â  Â  // VÃ©rifie si le login existe dÃ©jÃ  en base
Â  Â  const [loginRows] = await bddConnexion.query(
Â  Â  Â  "SELECT * FROM `User` WHERE `login` = ?",
Â  Â  Â  [login]
Â  Â  );
Â  Â  if (loginRows.length > 0) {
Â  Â  Â  return res.status(400).json({ error: "Identifiant dÃ©jÃ  pris." });
Â  Â  }

Â  Â  // VÃ©rifie si lâ€™adresse mail existe dÃ©jÃ 
Â  Â  const [mailRows] = await bddConnexion.query(
Â  Â  Â  "SELECT * FROM `User` WHERE `mail` = ?",
Â  Â  Â  [mail]
Â  Â  );
Â  Â  if (mailRows.length > 0) {
Â  Â  Â  return res.status(400).json({ error: "Adresse e-mail dÃ©jÃ  utilisÃ©e." });
Â  Â  }

Â  Â  // Hash du mot de passe
Â  Â  const hashedPassword = await bcrypt.hash(password, 10); 

// Insertion du nouvel utilisateur, en ajoutant la colonne 'token' avec la valeur NULL
    await bddConnexion.query(
      "INSERT INTO `User` (`nom`, `prenom`, `mail`, `login`, `password`, `boolAdmin`, `token`) VALUES (?, ?, ?, ?, ?, 0, NULL)",
      [nom, prenom, mail, login, hashedPassword]
    );

Â  Â  return res.json({ message: "Utilisateur crÃ©Ã© avec succÃ¨s." });

Â  } catch (err) {
Â  Â  console.error("Erreur register:", err);

Â  Â  if (err.code === "ER_DUP_ENTRY") {
Â  Â  Â  if (err.sqlMessage.includes("mail")) {
Â  Â  Â  Â  return res.status(400).json({ error: "Adresse e-mail dÃ©jÃ  utilisÃ©e." });
Â  Â  Â  }
Â  Â  Â  if (err.sqlMessage.includes("login")) {
Â  Â  Â  Â  return res.status(400).json({ error: "Identifiant dÃ©jÃ  pris." });
Â  Â  Â  }
Â  Â  }

Â  Â  return res.status(500).json({ error: "Erreur serveur." });
Â  }
});


// ==========================
// LOGIN (Connexion) - ADAPTÃ‰ BDD + JWT
// ==========================
app.post("/login", async (req, res) => {
Â  const { login, password } = req.body;

Â  if (!login || !password) {
Â  Â  return res.status(400).json({ error: "Identifiant et mot de passe requis." });
Â  }

Â  try {
Â  Â  // Recherche de l'utilisateur par login (ADAPTÃ‰ AU NOM DE TABLE ET COLONNE)
Â  Â  const [rows] = await bddConnexion.query(
Â  Â  Â  "SELECT * FROM `User` WHERE `login` = ?",
Â  Â  Â  [login]
Â  Â  );

Â  Â  if (rows.length === 0) {
Â  Â  Â  return res.status(401).json({ error: "Identifiant ou mot de passe incorrect." });
Â  Â  }

Â  Â  const user = rows[0];

Â  Â  // VÃ©rifie la correspondance du mot de passe
Â  Â  const valid = await bcrypt.compare(password, user.password);
Â  Â  if (!valid) {
Â  Â  Â  return res.status(401).json({ error: "Identifiant ou mot de passe incorrect." });
Â  Â  }

Â  Â  // --- LOGIQUE JWT ---
Â  Â  // 1. DÃ©finition du payload (ADAPTÃ‰ AUX COLONNES `id` et `boolAdmin`)
Â  Â  const payload = { 
Â  Â  Â  Â  userId: user.id, 
Â  Â  Â  Â  isAdmin: user.boolAdmin 
Â  Â  };

Â  Â  // 2. GÃ©nÃ©ration et signature du token
Â  Â  const token = jwt.sign(payload, SECRET_KEY, { expiresIn: '1h' }); 

Â  Â  // 3. Envoi du token et des donnÃ©es utilisateur au client (ADAPTÃ‰ AUX COLONNES)
Â  Â  return res.json({ 
Â  Â  Â  Â  message: 'Connexion rÃ©ussie', 
Â  Â  Â  Â  token: token, // Le jeton Ã  stocker sur le front
Â  Â  Â  Â  user: { 
Â  Â  Â  Â  Â  Â  id: user.id,
Â  Â  Â  Â  Â  Â  login: user.login,
Â  Â  Â  Â  Â  Â  nom: user.nom,
Â  Â  Â  Â  Â  Â  prenom: user.prenom,
Â  Â  Â  Â  Â  Â  mail: user.mail,
Â  Â  Â  Â  Â  Â  admin: user.boolAdmin
Â  Â  Â  Â  }
Â  Â  });
Â  } catch (err) {
Â  Â  console.error("Erreur login:", err);
Â  Â  return res.status(500).json({ error: "Erreur serveur." });
Â  }
});


// ==========================
// Lancement du serveur
// ==========================
app.listen(PORT, () => {
Â  console.log(`ğŸš€ Serveur dÃ©marrÃ© sur http://172.29.18.249:${PORT}`);
});